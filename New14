import org.bouncycastle.asn1.*;

public class KerberosMessageParser {
    public static void main(String[] args) throws Exception {
        String hexString = "3081e0a081c70481c4000000c06a81bd3081baa103020105a20302010aa31a3018300aa10402020096a2020400300aa10402020095a2020400a4819130818ea00703050040010010a1133011a003020101a10a30081b066c79616e6f76a2141b12455352542e434c4f55442e534252462e5255a3273025a003020102a11e301c1b066b72627467741b12455352542e434c4f55442e534252462e5255a511180f32303235303232323036323830385aa7060204346edc96a814301202011402011302011202011102011a020119a1141b12455352542e434c4f55442e534252462e5255";
        
        byte[] data = hexStringToByteArray(hexString);
        ASN1InputStream asnInputStream = new ASN1InputStream(data);
        
        ASN1Primitive asn1 = asnInputStream.readObject();
        
        // Получаем тип сообщения (message-type)
        ASN1Sequence outerSeq = (ASN1Sequence) ((ASN1TaggedObject) asn1).getObject();
        ASN1TaggedObject msgTypeObj = (ASN1TaggedObject) ((ASN1Sequence) ((ASN1TaggedObject) outerSeq.getObjectAt(0)).getObject()).getObjectAt(1);
        int messageType = ASN1Integer.getInstance(msgTypeObj.getObject()).intValueExact();
        
        // Получаем принципала
        ASN1Sequence principalSeq = (ASN1Sequence) ((ASN1TaggedObject) ((ASN1Sequence) ((ASN1TaggedObject) outerSeq.getObjectAt(0)).getObject()).getObjectAt(3)).getObject();
        ASN1TaggedObject nameStringObj = (ASN1TaggedObject) principalSeq.getObjectAt(1);
        ASN1Sequence nameStringSeq = (ASN1Sequence) nameStringObj.getObject();
        String principal = DERUTF8String.getInstance(((ASN1TaggedObject) nameStringSeq.getObjectAt(1)).getObject()).getString();
        
        System.out.println("Message Type: " + messageType);
        System.out.println("Principal: " + principal);
        
        asnInputStream.close();
    }
    
    private static byte[] hexStringToByteArray(String s) {
        int len = s.length();
        byte[] data = new byte[len / 2];
        for (int i = 0; i < len; i += 2) {
            data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)
                    + Character.digit(s.charAt(i + 1), 16));
        }
        return data;
    }
}
