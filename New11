import java.io.ByteArrayInputStream; import java.io.IOException; import javax.xml.bind.DatatypeConverter; import java.nio.charset.StandardCharsets;

public class KerberosASReqParser { public static void main(String[] args) throws IOException { String hexData = "3081e0a081c70481c4000000c06a81bd3081baa103020105a20302010aa31a3018300aa10402020096a2020400300aa10402020095a2020400a4819130818ea00703050040010010a1133011a003020101a10a30081b066c79616e6f76a2141b12455352542e434c4f55442e534252462e5255a3273025a003020102a11e301c1b066b72627467741b12455352542e434c4f55442e534252462e5255a511180f32303235303232323036323830385aa7060204346edc96a814301202011402011302011202011102011a020119a1141b12455352542e434c4f55442e534252462e5255"; byte[] data = DatatypeConverter.parseHexBinary(hexData); parseKerberosMessage(data); }

public static void parseKerberosMessage(byte[] data) throws IOException {
    ByteArrayInputStream inputStream = new ByteArrayInputStream(data);
    if (inputStream.read() != 0x30) { // Проверяем, что это ASN.1 SEQUENCE
        throw new IOException("Неверный формат ASN.1");
    }
    skipLength(inputStream);
    
    String requestType = "Неизвестный тип запроса";
    String principal = "Неизвестный принципал";
    
    while (inputStream.available() > 0) {
        int tag = inputStream.read();
        if (tag == 0xA1) { // Ищем тег с типом запроса
            skipLength(inputStream);
            int typeTag = inputStream.read();
            if (typeTag == 0x02) { // INTEGER
                int length = inputStream.read();
                int type = inputStream.read();
                requestType = (type == 0x05) ? "AS-REQ" : (type == 0x0A) ? "TGS-REQ" : "Неизвестный тип запроса";
            }
        } else if (tag == 0xA3) { // Ищем Principal Name
            skipLength(inputStream);
            principal = extractPrincipalName(inputStream);
        }
    }
    
    System.out.println("Тип запроса: " + requestType);
    System.out.println("Определенный принципал: " + principal);
}

private static void skipLength(ByteArrayInputStream inputStream) throws IOException {
    int length = inputStream.read();
    if (length > 127) {
        int numBytes = length & 0x7F;
        inputStream.skip(numBytes);
    }
}

private static String extractPrincipalName(ByteArrayInputStream inputStream) throws IOException {
    while (inputStream.available() > 0) {
        int tag = inputStream.read();
        if (tag == 0x1B) { // UTF8String
            int length = inputStream.read();
            byte[] nameBytes = new byte[length];
            inputStream.read(nameBytes, 0, length);
            return new String(nameBytes, StandardCharsets.UTF_8);
        }
    }
    return "Неизвестный принципал";
}

}


public static byte[] hexStringToByteArray(String s) {
    int len = s.length();
    byte[] data = new byte[len / 2];
    for (int i = 0; i < len; i += 2) {
        data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)
                             + Character.digit(s.charAt(i+1), 16));
    }
    return data;
}
