import java.util.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.*;

public class LatencyBasedLoadBalancer {

    public enum Strategy {
        LATENCY_AWARE,
        ROUND_ROBIN
    }

    private static class LatencySample {
        final long timestampNanos;
        final long latencyMillis;

        LatencySample(long timestampNanos, long latencyMillis) {
            this.timestampNanos = timestampNanos;
            this.latencyMillis = latencyMillis;
        }
    }

    private static class HostStats {
        final String host;
        final ConcurrentLinkedQueue<LatencySample> samples = new ConcurrentLinkedQueue<>();
        final LongAdder totalLatency = new LongAdder();
        final LongAdder count = new LongAdder();

        HostStats(String host) {
            this.host = host;
        }
    }

    private final ConcurrentHashMap<String, HostStats> hostMap = new ConcurrentHashMap<>();
    private volatile HostStats[] cachedHosts = new HostStats[0];

    private final long windowSizeNanos;
    private final Strategy strategy;
    private final ScheduledExecutorService cleanupExecutor;

    private final AtomicInteger rrIndex = new AtomicInteger(0);
    private final Random random = ThreadLocalRandom.current();

    public LatencyBasedLoadBalancer(long windowSeconds, Strategy strategy) {
        this.windowSizeNanos = TimeUnit.SECONDS.toNanos(windowSeconds);
        this.strategy = strategy;
        this.cleanupExecutor = Executors.newSingleThreadScheduledExecutor();
        this.cleanupExecutor.scheduleAtFixedRate(this::cleanOldSamples, 1, 1, TimeUnit.SECONDS);
    }

    // Обратная совместимость — по умолчанию LATENCY_AWARE
    public LatencyBasedLoadBalancer(long windowSeconds) {
        this(windowSeconds, Strategy.LATENCY_AWARE);
    }

    public void shutdown() {
        cleanupExecutor.shutdown();
    }

    public void addHost(String host) {
        hostMap.computeIfAbsent(host, h -> {
            HostStats stats = new HostStats(h);
            refreshHostArray();
            return stats;
        });
    }

    public void removeHost(String host) {
        hostMap.remove(host);
        refreshHostArray();
    }

    public List<String> getAllHosts() {
        return new ArrayList<>(hostMap.keySet());
    }

    public void recordResponseTime(String host, long latencyMillis) {
        HostStats stats = hostMap.get(host);
        if (stats == null) return;

        long now = System.nanoTime();
        stats.samples.add(new LatencySample(now, latencyMillis));
        stats.totalLatency.add(latencyMillis);
        stats.count.increment();
    }

    public double getHostLatencyAverage(String host) {
        HostStats stats = hostMap.get(host);
        if (stats == null || stats.count.sum() == 0) return Double.MAX_VALUE;
        return stats.totalLatency.sum() / (double) stats.count.sum();
    }

    public String getHost() {
        HostStats[] hosts = cachedHosts;
        if (hosts.length == 0) return null;

        if (strategy == Strategy.ROUND_ROBIN) {
            int index = Math.abs(rrIndex.getAndIncrement() % hosts.length);
            return hosts[index].host;
        }

        // LATENCY_AWARE
        double[] weights = new double[hosts.length];
        double totalWeight = 0.0;

        for (int i = 0; i < hosts.length; i++) {
            long count = hosts[i].count.sum();
            double latency = count == 0 ? Double.MAX_VALUE : (double) hosts[i].totalLatency.sum() / count;
            double weight = (latency == Double.MAX_VALUE) ? 0.0 : 1.0 / (latency + 1);
            weights[i] = weight;
            totalWeight += weight;
        }

        if (totalWeight == 0.0) {
            return hosts[random.nextInt(hosts.length)].host;
        }

        double r = random.nextDouble() * totalWeight;
        double cumulative = 0.0;

        for (int i = 0; i < hosts.length; i++) {
            cumulative += weights[i];
            if (r <= cumulative) return hosts[i].host;
        }

        return hosts[random.nextInt(hosts.length)].host;
    }

    private void cleanOldSamples() {
        long threshold = System.nanoTime() - windowSizeNanos;

        for (HostStats stats : hostMap.values()) {
            while (true) {
                LatencySample sample = stats.samples.peek();
                if (sample == null || sample.timestampNanos >= threshold) break;
                stats.samples.poll();
                stats.totalLatency.add(-sample.latencyMillis);
                stats.count.decrement();
            }
        }
    }

    private void refreshHostArray() {
        this.cachedHosts = hostMap.values().toArray(new HostStats[0]);
    }
}


import java.util.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.*;

public class LatencyBasedLoadBalancer {

    private static class HostStats {
        final String host;
        final ConcurrentLinkedQueue<LatencySample> samples = new ConcurrentLinkedQueue<>();
        final LongAdder totalLatency = new LongAdder();
        final LongAdder count = new LongAdder();
    }

    private static class LatencySample {
        final long timestampNanos;
        final long latencyMillis;

        LatencySample(long timestampNanos, long latencyMillis) {
            this.timestampNanos = timestampNanos;
            this.latencyMillis = latencyMillis;
        }
    }

    private final ConcurrentHashMap<String, HostStats> hostMap = new ConcurrentHashMap<>();
    private volatile HostStats[] cachedHosts = new HostStats[0];
    private final long windowSizeNanos;
    private final ScheduledExecutorService cleanupExecutor;
    private final Random random = ThreadLocalRandom.current();

    public LatencyBasedLoadBalancer(long windowSeconds) {
        this.windowSizeNanos = TimeUnit.SECONDS.toNanos(windowSeconds);
        this.cleanupExecutor = Executors.newSingleThreadScheduledExecutor();
        this.cleanupExecutor.scheduleAtFixedRate(this::cleanOldSamples, 1, 1, TimeUnit.SECONDS);
    }

    public void shutdown() {
        cleanupExecutor.shutdown();
    }

    public void addHost(String host) {
        hostMap.computeIfAbsent(host, h -> {
            HostStats stats = new HostStats();
            stats.host = host;
            refreshHostArray();
            return stats;
        });
    }

    public void removeHost(String host) {
        hostMap.remove(host);
        refreshHostArray();
    }

    public List<String> getAllHosts() {
        return new ArrayList<>(hostMap.keySet());
    }

    public void recordResponseTime(String host, long latencyMillis) {
        HostStats stats = hostMap.get(host);
        if (stats == null) return;
        long now = System.nanoTime();
        stats.samples.add(new LatencySample(now, latencyMillis));
        stats.totalLatency.add(latencyMillis);
        stats.count.increment();
    }

    public double getHostLatencyAverage(String host) {
        HostStats stats = hostMap.get(host);
        if (stats == null || stats.count.sum() == 0) return Double.MAX_VALUE;
        return stats.totalLatency.sum() / (double) stats.count.sum();
    }

    public String getHost() {
        HostStats[] hosts = cachedHosts;
        if (hosts.length == 0) return null;

        double[] weights = new double[hosts.length];
        double total = 0.0;

        for (int i = 0; i < hosts.length; i++) {
            long cnt = hosts[i].count.sum();
            double latency = cnt == 0 ? Double.MAX_VALUE : (double) hosts[i].totalLatency.sum() / cnt;
            double weight = (latency == Double.MAX_VALUE) ? 0.0 : 1.0 / (latency + 1);
            weights[i] = weight;
            total += weight;
        }

        if (total == 0.0) {
            return hosts[random.nextInt(hosts.length)].host;
        }

        double r = random.nextDouble() * total;
        double cum = 0;
        for (int i = 0; i < weights.length; i++) {
            cum += weights[i];
            if (r <= cum) return hosts[i].host;
        }

        return hosts[random.nextInt(hosts.length)].host;
    }

    private void cleanOldSamples() {
        long threshold = System.nanoTime() - windowSizeNanos;
        for (HostStats stats : hostMap.values()) {
            while (true) {
                LatencySample s = stats.samples.peek();
                if (s == null || s.timestampNanos >= threshold) break;
                stats.samples.poll();
                stats.totalLatency.add(-s.latencyMillis);
                stats.count.decrement();
            }
        }
    }

    private void refreshHostArray() {
        this.cachedHosts = hostMap.values().toArray(new HostStats[0]);
    }
}



import java.util.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.AtomicLong;

public class LatencyBasedLoadBalancerTest {

    public static void main(String[] args) throws InterruptedException {
        LatencyBasedLoadBalancer lb = new LatencyBasedLoadBalancer(10); // 10 секунд окно

        // Добавим хосты
        lb.addHost("10.0.0.1");
        lb.addHost("10.0.0.2");
        lb.addHost("10.0.0.3");

        // Имитируем latency: мапа хост → диапазон latency
        Map<String, int[]> latencyProfile = Map.of(
            "10.0.0.1", new int[]{80, 120},
            "10.0.0.2", new int[]{150, 250},
            "10.0.0.3", new int[]{50, 70}
        );

        ExecutorService requestPool = Executors.newFixedThreadPool(32);
        AtomicLong requestCount = new AtomicLong();
        long startTime = System.currentTimeMillis();
        long endTime = startTime + 300_000; // 5 минут

        // Поток: нагрузка
        Runnable trafficGenerator = () -> {
            Random rand = new Random();
            while (System.currentTimeMillis() < endTime) {
                String host = lb.getHost();
                if (host == null) continue;
                int[] range = latencyProfile.getOrDefault(host, new int[]{100, 200});
                long latency = range[0] + rand.nextInt(range[1] - range[0] + 1);
                lb.recordResponseTime(host, latency);
                requestCount.incrementAndGet();

                try {
                    Thread.sleep(1); // Минимальная пауза между запросами
                } catch (InterruptedException ignored) {
                }
            }
        };

        // Поток: логирование RPS каждую секунду
        Thread rpsLogger = new Thread(() -> {
            long lastCount = 0;
            while (System.currentTimeMillis() < endTime) {
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException ignored) {
                }
                long current = requestCount.get();
                long rps = current - lastCount;
                lastCount = current;
                System.out.println("[RPS] " + rps + " req/s");
            }
        });

        // Поток: логирование latency каждые 10 секунд
        Thread latencyLogger = new Thread(() -> {
            while (System.currentTimeMillis() < endTime) {
                try {
                    Thread.sleep(10_000);
                } catch (InterruptedException ignored) {
                }
                System.out.println("---- Средние latency за последние 10 секунд ----");
                for (String host : lb.getAllHosts()) {
                    double avg = lb.getHostLatencyAverage(host);
                    System.out.printf("  %s : %.2f ms%n", host, avg);
                }
                System.out.println("------------------------------------------------");
            }
        });

        // Запускаем
        for (int i = 0; i < 16; i++) {
            requestPool.submit(trafficGenerator);
        }
        rpsLogger.start();
        latencyLogger.start();

        // Ждём завершения
        requestPool.shutdown();
        requestPool.awaitTermination(6, TimeUnit.MINUTES); // с запасом
        rpsLogger.join();
        latencyLogger.join();

        System.out.println("=== Тест завершён ===");
    }
}


import java.util.*;
import java.util.concurrent.*;
import java.util.concurrent.locks.*;
import java.util.stream.Collectors;

public class LatencyBasedLoadBalancer {

    private static class LatencyEntry {
        final long timestampMillis;
        final long latencyMillis;

        LatencyEntry(long timestampMillis, long latencyMillis) {
            this.timestampMillis = timestampMillis;
            this.latencyMillis = latencyMillis;
        }
    }

    private static class HostStats {
        final String host;
        final Deque<LatencyEntry> latencyWindow = new ConcurrentLinkedDeque<>();
        final ReentrantReadWriteLock lock = new ReentrantReadWriteLock();

        HostStats(String host) {
            this.host = host;
        }

        void recordLatency(long latencyMillis, long nowMillis, long windowSizeMillis) {
            lock.writeLock().lock();
            try {
                latencyWindow.addLast(new LatencyEntry(nowMillis, latencyMillis));
                // Remove outdated entries
                while (!latencyWindow.isEmpty() && nowMillis - latencyWindow.peekFirst().timestampMillis > windowSizeMillis) {
                    latencyWindow.pollFirst();
                }
            } finally {
                lock.writeLock().unlock();
            }
        }

        double getAverageLatency(long nowMillis, long windowSizeMillis) {
            lock.readLock().lock();
            try {
                List<LatencyEntry> valid = latencyWindow.stream()
                        .filter(e -> nowMillis - e.timestampMillis <= windowSizeMillis)
                        .collect(Collectors.toList());
                if (valid.isEmpty()) return Double.MAX_VALUE;
                long total = valid.stream().mapToLong(e -> e.latencyMillis).sum();
                return total / (double) valid.size();
            } finally {
                lock.readLock().unlock();
            }
        }
    }

    private final ConcurrentHashMap<String, HostStats> hosts = new ConcurrentHashMap<>();
    private final long windowSizeMillis;
    private final Random random = new Random();

    public LatencyBasedLoadBalancer(long windowSizeSeconds) {
        this.windowSizeMillis = windowSizeSeconds * 1000;
    }

    public void addHost(String host) {
        hosts.putIfAbsent(host, new HostStats(host));
    }

    public void removeHost(String host) {
        hosts.remove(host);
    }

    public void recordResponseTime(String host, long latencyMillis) {
        HostStats stats = hosts.get(host);
        if (stats != null) {
            stats.recordLatency(latencyMillis, System.currentTimeMillis(), windowSizeMillis);
        }
    }

    public double getHostLatencyAverage(String host) {
        HostStats stats = hosts.get(host);
        if (stats == null) return -1;
        return stats.getAverageLatency(System.currentTimeMillis(), windowSizeMillis);
    }

    public String getHost() {
        long now = System.currentTimeMillis();
        List<HostStats> available = new ArrayList<>(hosts.values());
        if (available.isEmpty()) return null;

        // Получаем latency и создаём веса: чем меньше latency, тем выше вес
        Map<HostStats, Double> scores = new HashMap<>();
        double totalWeight = 0;

        for (HostStats h : available) {
            double latency = h.getAverageLatency(now, windowSizeMillis);
            double weight = latency == Double.MAX_VALUE ? 0.0 : 1.0 / (latency + 1); // +1 чтобы избежать деления на 0
            scores.put(h, weight);
            totalWeight += weight;
        }

        if (totalWeight == 0.0) {
            // Все latency неизвестны — выбираем случайного
            return available.get(random.nextInt(available.size())).host;
        }

        // Взвешенный случайный выбор
        double r = random.nextDouble() * totalWeight;
        double cumulative = 0.0;

        for (Map.Entry<HostStats, Double> e : scores.entrySet()) {
            cumulative += e.getValue();
            if (r <= cumulative) {
                return e.getKey().host;
            }
        }

        // fallback — возвращаем случайный
        return available.get(random.nextInt(available.size())).host;
    }

    // Метод для получения всех хостов (например, для метрик или дебага)
    public List<String> getAllHosts() {
        return new ArrayList<>(hosts.keySet());
    }
}
