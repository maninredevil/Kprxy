import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

/**
 * Пример использования LoadBalancer с симуляцией высокой нагрузки
 */
public class LoadBalancerExample {
    
    public static void main(String[] args) throws InterruptedException {
        // Создаем балансировщик
        LoadBalancer balancer = new LoadBalancer();
        
        // Добавляем хосты
        balancer.addHost("server1.example.com");
        balancer.addHost("server2.example.com");
        balancer.addHost("server3.example.com");
        balancer.addHost("server4.example.com");
        
        // Демонстрация разных стратегий
        demonstrateStrategies(balancer);
        
        // Симуляция высокой нагрузки
        simulateHighLoad(balancer);
        
        // Показываем статистику
        showStatistics(balancer);
        
        // Управление хостами
        demonstrateHostManagement(balancer);
        
        balancer.shutdown();
    }
    
    private static void demonstrateStrategies(LoadBalancer balancer) {
        System.out.println("=== Демонстрация стратегий балансировки ===");
        
        LoadBalancer.Strategy[] strategies = LoadBalancer.Strategy.values();
        
        for (LoadBalancer.Strategy strategy : strategies) {
            balancer.setStrategy(strategy);
            System.out.println("\nСтратегия: " + strategy);
            
            for (int i = 0; i < 5; i++) {
                String host = balancer.getNextHost();
                System.out.println("Запрос " + (i + 1) + " -> " + host);
                
                // Симулируем время ответа (разное для разных хостов)
                long responseTime = simulateResponseTime(host);
                balancer.reportResponseTime(host, responseTime);
                
                try {
                    Thread.sleep(10); // Небольшая пауза
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                    break;
                }
            }
        }
    }
    
    private static void simulateHighLoad(LoadBalancer balancer) throws InterruptedException {
        System.out.println("\n=== Симуляция высокой нагрузки (30,000 запросов) ===");
        
        // Устанавливаем адаптивную стратегию
        balancer.setStrategy(LoadBalancer.Strategy.ADAPTIVE_WEIGHTED);
        
        ExecutorService executor = Executors.newFixedThreadPool(100);
        long startTime = System.currentTimeMillis();
        
        for (int i = 0; i < 30000; i++) {
            final int requestId = i;
            executor.submit(() -> {
                try {
                    String host = balancer.getNextHost();
                    long responseTime = simulateResponseTime(host);
                    balancer.reportResponseTime(host, responseTime);
                    
                    if (requestId % 5000 == 0) {
                        System.out.println("Обработано запросов: " + requestId);
                    }
                } catch (Exception e) {
                    System.err.println("Ошибка при обработке запроса " + requestId + ": " + e.getMessage());
                }
            });
        }
        
        executor.shutdown();
        executor.awaitTermination(30, TimeUnit.SECONDS);
        
        long endTime = System.currentTimeMillis();
        long duration = endTime - startTime;
        double rps = 30000.0 / (duration / 1000.0);
        
        System.out.println("Время выполнения: " + duration + "ms");
        System.out.println("Запросов в секунду: " + String.format("%.0f", rps));
    }
    
    private static void showStatistics(LoadBalancer balancer) {
        System.out.println("\n=== Статистика хостов ===");
        
        balancer.getStats().forEach((host, stats) -> {
            System.out.println(host + ": " + stats);
        });
    }
    
    private static void demonstrateHostManagement(LoadBalancer balancer) {
        System.out.println("\n=== Управление хостами ===");
        
        System.out.println("Текущие хосты: " + balancer.getHosts());
        
        // Добавляем новый хост
        balancer.addHost("server5.example.com");
        System.out.println("После добавления server5: " + balancer.getHosts());
        
        // Удаляем хост
        boolean removed = balancer.removeHost("server1.example.com");
        System.out.println("Удален server1: " + removed);
        System.out.println("После удаления server1: " + balancer.getHosts());
        
        // Тестируем балансировку с новым составом хостов
        System.out.println("\nТестирование с новым составом хостов:");
        for (int i = 0; i < 5; i++) {
            String host = balancer.getNextHost();
            System.out.println("Запрос " + (i + 1) + " -> " + host);
            balancer.reportResponseTime(host, simulateResponseTime(host));
        }
    }
    
    /**
     * Симулирует время ответа хоста (разные хосты имеют разную производительность)
     */
    private static long simulateResponseTime(String host) {
        // Базовое время ответа зависит от хоста
        long baseTime = switch (host) {
            case "server1.example.com" -> 50;   // Быстрый сервер
            case "server2.example.com" -> 100;  // Средний сервер
            case "server3.example.com" -> 150;  // Медленный сервер
            case "server4.example.com" -> 75;   // Быстро-средний сервер
            case "server5.example.com" -> 120;  // Медленно-средний сервер
            default -> 100;
        };
        
        // Добавляем случайную вариацию (±30%)
        double variation = 0.7 + (Math.random() * 0.6); // 0.7 to 1.3
        return Math.round(baseTime * variation);
    }
}

import java.util.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;

/**
 * Высокопроизводительный балансировщик нагрузки с поддержкой различных стратегий
 * и учетом времени ответа хостов за последние 5 минут.
 * Рассчитан на 30,000+ запросов в секунду.
 */
public class LoadBalancer {
    
    public enum Strategy {
        ROUND_ROBIN,           // Круговое распределение
        WEIGHTED_RESPONSE_TIME, // Взвешенное по времени ответа
        LEAST_CONNECTIONS,     // Наименьшее количество соединений
        ADAPTIVE_WEIGHTED      // Адаптивное взвешенное (гибрид)
    }
    
    private volatile Strategy currentStrategy = Strategy.ADAPTIVE_WEIGHTED;
    private final ConcurrentHashMap<String, HostMetrics> hosts = new ConcurrentHashMap<>();
    private final AtomicInteger roundRobinCounter = new AtomicInteger(0);
    private final ScheduledExecutorService cleanupExecutor = Executors.newSingleThreadScheduledExecutor();
    
    // Настраиваемые параметры балансировки
    private volatile long metricsWindowMs = 5 * 60 * 1000; // 5 минут
    private volatile int cleanupIntervalSec = 30; // Очистка каждые 30 секунд
    private volatile double smoothingFactor = 0.1; // Фактор сглаживания для плавной балансировки
    private volatile double responseTimeExponent = 2.0; // Экспонента для усиления различий во времени ответа
    private volatile double responseTimeWeight = 0.7; // Вес времени ответа в адаптивной стратегии (0.0-1.0)
    private volatile double connectionWeight = 0.3; // Вес количества соединений в адаптивной стратегии
    private volatile int metricsRecalcInterval = 100; // Пересчет метрик каждые N запросов
    private volatile long hostTimeoutMs = 60000; // Время неактивности хоста для применения сглаживания (1 минута)
    private volatile double slowHostPenalty = 1.5; // Штраф для медленных хостов
    private volatile double fastHostBonus = 0.8; // Бонус для быстрых хостов
    
    public LoadBalancer() {
        // Запускаем периодическую очистку старых метрик
        cleanupExecutor.scheduleWithFixedDelay(
            this::cleanupOldMetrics, 
            cleanupIntervalSec, 
            cleanupIntervalSec, 
            TimeUnit.SECONDS
        );
    }
    
    /**
     * Конструктор с настраиваемыми параметрами
     */
    public LoadBalancer(LoadBalancerConfig config) {
        this.metricsWindowMs = config.metricsWindowMs;
        this.cleanupIntervalSec = config.cleanupIntervalSec;
        this.smoothingFactor = config.smoothingFactor;
        this.responseTimeExponent = config.responseTimeExponent;
        this.responseTimeWeight = config.responseTimeWeight;
        this.connectionWeight = config.connectionWeight;
        this.metricsRecalcInterval = config.metricsRecalcInterval;
        this.hostTimeoutMs = config.hostTimeoutMs;
        this.slowHostPenalty = config.slowHostPenalty;
        this.fastHostBonus = config.fastHostBonus;
        
        // Запускаем периодическую очистку старых метрик
        cleanupExecutor.scheduleWithFixedDelay(
            this::cleanupOldMetrics, 
            cleanupIntervalSec, 
            cleanupIntervalSec, 
            TimeUnit.SECONDS
        );
    }
    
    /**
     * Метрики хоста с оптимизацией для высокой нагрузки
     */
    private static class HostMetrics {
        private final String host;
        private final ConcurrentLinkedQueue<ResponseTime> responseTimes = new ConcurrentLinkedQueue<>();
        private final AtomicInteger activeConnections = new AtomicInteger(0);
        private volatile double avgResponseTime = 0.0;
        private volatile long lastUpdateTime = System.currentTimeMillis();
        private final AtomicLong totalRequests = new AtomicLong(0);
        
        HostMetrics(String host) {
            this.host = host;
        }
        
        void addResponseTime(long responseTimeMs) {
            long now = System.currentTimeMillis();
            responseTimes.offer(new ResponseTime(responseTimeMs, now));
            totalRequests.incrementAndGet();
            lastUpdateTime = now;
            
            // Периодически пересчитываем среднее время ответа
            if (totalRequests.get() % LoadBalancer.this.metricsRecalcInterval == 0) {
                recalculateAvgResponseTime();
            }
        }
        
        void incrementConnections() {
            activeConnections.incrementAndGet();
        }
        
        void decrementConnections() {
            activeConnections.decrementAndGet();
        }
        
        double getAvgResponseTime() {
            return avgResponseTime;
        }
        
        int getActiveConnections() {
            return activeConnections.get();
        }
        
        private void recalculateAvgResponseTime() {
            long cutoffTime = System.currentTimeMillis() - LoadBalancer.this.metricsWindowMs;
            List<Long> validTimes = new ArrayList<>();
            
            // Собираем актуальные времена ответа
            Iterator<ResponseTime> it = responseTimes.iterator();
            while (it.hasNext()) {
                ResponseTime rt = it.next();
                if (rt.timestamp >= cutoffTime) {
                    validTimes.add(rt.responseTime);
                }
            }
            
            if (!validTimes.isEmpty()) {
                avgResponseTime = validTimes.stream()
                    .mapToLong(Long::longValue)
                    .average()
                    .orElse(0.0);
            }
        }
        
        void cleanup(long cutoffTime) {
            responseTimes.removeIf(rt -> rt.timestamp < cutoffTime);
            recalculateAvgResponseTime();
        }
    }
    
    private static class ResponseTime {
        final long responseTime;
        final long timestamp;
        
        ResponseTime(long responseTime, long timestamp) {
            this.responseTime = responseTime;
            this.timestamp = timestamp;
        }
    }
    
    /**
     * Добавляет хост в пул балансировки
     */
    public void addHost(String host) {
        if (host == null || host.trim().isEmpty()) {
            throw new IllegalArgumentException("Host cannot be null or empty");
        }
        hosts.put(host, new HostMetrics(host));
    }
    
    /**
     * Удаляет хост из пула балансировки
     */
    public boolean removeHost(String host) {
        return hosts.remove(host) != null;
    }
    
    /**
     * Устанавливает стратегию балансировки
     */
    public void setStrategy(Strategy strategy) {
        this.currentStrategy = strategy;
    }
    
    /**
     * Получает стратегию балансировки
     */
    public Strategy getStrategy() {
        return currentStrategy;
    }
    
    /**
     * Получает список всех хостов
     */
    public Set<String> getHosts() {
        return new HashSet<>(hosts.keySet());
    }
    
    /**
     * Выбирает хост для следующего запроса согласно текущей стратегии
     */
    public String getNextHost() {
        if (hosts.isEmpty()) {
            throw new IllegalStateException("No hosts available");
        }
        
        String selectedHost = switch (currentStrategy) {
            case ROUND_ROBIN -> getRoundRobinHost();
            case WEIGHTED_RESPONSE_TIME -> getWeightedResponseTimeHost();
            case LEAST_CONNECTIONS -> getLeastConnectionsHost();
            case ADAPTIVE_WEIGHTED -> getAdaptiveWeightedHost();
        };
        
        // Увеличиваем счетчик активных соединений для выбранного хоста
        if (selectedHost != null) {
            hosts.get(selectedHost).incrementConnections();
        }
        
        return selectedHost;
    }
    
    /**
     * Уведомляет балансировщик о завершении запроса и времени ответа
     */
    public void reportResponseTime(String host, long responseTimeMs) {
        HostMetrics metrics = hosts.get(host);
        if (metrics != null) {
            metrics.addResponseTime(responseTimeMs);
            metrics.decrementConnections();
        }
    }
    
    // Стратегии балансировки
    
    private String getRoundRobinHost() {
        List<String> hostList = new ArrayList<>(hosts.keySet());
        int index = Math.abs(roundRobinCounter.getAndIncrement()) % hostList.size();
        return hostList.get(index);
    }
    
    private String getWeightedResponseTimeHost() {
        List<String> hostList = new ArrayList<>(hosts.keySet());
        if (hostList.size() == 1) {
            return hostList.get(0);
        }
        
        // Вычисляем веса на основе времени ответа с экспоненциальным усилением
        Map<String, Double> weights = new HashMap<>();
        double totalWeight = 0.0;
        
        // Сначала найдем минимальное и максимальное время ответа для нормализации
        double minTime = Double.MAX_VALUE;
        double maxTime = Double.MIN_VALUE;
        
        for (String host : hostList) {
            double avgTime = hosts.get(host).getAvgResponseTime();
            minTime = Math.min(minTime, avgTime);
            maxTime = Math.max(maxTime, avgTime);
        }
        
        // Избегаем деления на ноль
        double timeRange = maxTime - minTime;
        if (timeRange == 0) {
            timeRange = 1.0;
        }
        
        for (String host : hostList) {
            HostMetrics metrics = hosts.get(host);
            double avgTime = metrics.getAvgResponseTime();
            
            // Нормализуем время ответа (0-1, где 0 - самый быстрый)
            double normalizedTime = (avgTime - minTime) / timeRange;
            
            // Применяем экспоненциальное усиление различий
            double exponentialFactor = Math.pow(1.0 - normalizedTime, responseTimeExponent);
            
            // Применяем бонусы и штрафы
            if (normalizedTime < 0.3) { // Быстрые хосты (топ 30%)
                exponentialFactor *= (2.0 - fastHostBonus); // Увеличиваем бонус
            } else if (normalizedTime > 0.7) { // Медленные хосты (нижние 30%)
                exponentialFactor *= (2.0 - slowHostPenalty); // Применяем штраф
            }
            
            // Добавляем базовый вес для избежания полного исключения хостов
            double weight = exponentialFactor + 0.1;
            
            weights.put(host, weight);
            totalWeight += weight;
        }
        
        // Выбираем хост на основе весов
        double random = Math.random() * totalWeight;
        double currentWeight = 0.0;
        
        for (String host : hostList) {
            currentWeight += weights.get(host);
            if (random <= currentWeight) {
                return host;
            }
        }
        
        return hostList.get(0); // Fallback
    }
    
    private String getLeastConnectionsHost() {
        return hosts.entrySet().stream()
            .min(Comparator.comparingInt(entry -> entry.getValue().getActiveConnections()))
            .map(Map.Entry::getKey)
            .orElse(null);
    }
    
    private String getAdaptiveWeightedHost() {
        List<String> hostList = new ArrayList<>(hosts.keySet());
        if (hostList.size() == 1) {
            return hostList.get(0);
        }
        
        // Комбинируем время ответа и количество соединений с настраиваемыми весами
        Map<String, Double> scores = new HashMap<>();
        double totalScore = 0.0;
        
        // Нормализация значений
        double minTime = Double.MAX_VALUE, maxTime = Double.MIN_VALUE;
        int minConnections = Integer.MAX_VALUE, maxConnections = Integer.MIN_VALUE;
        
        for (String host : hostList) {
            HostMetrics metrics = hosts.get(host);
            double avgTime = metrics.getAvgResponseTime();
            int connections = metrics.getActiveConnections();
            
            minTime = Math.min(minTime, avgTime);
            maxTime = Math.max(maxTime, avgTime);
            minConnections = Math.min(minConnections, connections);
            maxConnections = Math.max(maxConnections, connections);
        }
        
        double timeRange = maxTime - minTime;
        int connectionRange = maxConnections - minConnections;
        
        if (timeRange == 0) timeRange = 1.0;
        if (connectionRange == 0) connectionRange = 1;
        
        for (String host : hostList) {
            HostMetrics metrics = hosts.get(host);
            double avgTime = metrics.getAvgResponseTime();
            int connections = metrics.getActiveConnections();
            
            // Нормализуем значения (0-1, где 0 - лучше)
            double normalizedTime = (avgTime - minTime) / timeRange;
            double normalizedConnections = (double)(connections - minConnections) / connectionRange;
            
            // Применяем экспоненциальное усиление к времени ответа
            double timeScore = Math.pow(1.0 - normalizedTime, responseTimeExponent);
            double connectionScore = 1.0 - normalizedConnections;
            
            // Комбинируем с настраиваемыми весами
            double combinedScore = (timeScore * responseTimeWeight) + 
                                 (connectionScore * connectionWeight);
            
            // Применяем сглаживание для плавной балансировки
            combinedScore = applySmoothingFactor(host, combinedScore);
            
            // Добавляем базовый вес
            combinedScore += 0.1;
            
            scores.put(host, combinedScore);
            totalScore += combinedScore;
        }
        
        // Выбираем хост на основе весов с элементом случайности
        double random = Math.random() * totalScore;
        double currentWeight = 0.0;
        
        for (String host : hostList) {
            currentWeight += scores.get(host);
            if (random <= currentWeight) {
                return host;
            }
        }
        
        return hostList.get(0); // Fallback
    }
    
    private double applySmoothingFactor(String host, double newWeight) {
        // Простое сглаживание для предотвращения резких скачков трафика
        HostMetrics metrics = hosts.get(host);
        long timeSinceLastUpdate = System.currentTimeMillis() - metrics.lastUpdateTime;
        
        // Если хост давно не использовался, даем ему шанс
        if (timeSinceLastUpdate > hostTimeoutMs) {
            return newWeight * (1.0 + smoothingFactor);
        }
        
        return newWeight;
    }
    
    /**
     * Очищает старые метрики для освобождения памяти
     */
    private void cleanupOldMetrics() {
        long cutoffTime = System.currentTimeMillis() - metricsWindowMs;
        hosts.values().parallelStream().forEach(metrics -> metrics.cleanup(cutoffTime));
    }
    
    /**
     * Получает статистику по всем хостам
     */
    public Map<String, HostStats> getStats() {
        Map<String, HostStats> stats = new HashMap<>();
        for (Map.Entry<String, HostMetrics> entry : hosts.entrySet()) {
            HostMetrics metrics = entry.getValue();
            stats.put(entry.getKey(), new HostStats(
                metrics.getAvgResponseTime(),
                metrics.getActiveConnections(),
                metrics.totalRequests.get()
            ));
        }
        return stats;
    }
    
    public static class HostStats {
        public final double avgResponseTime;
        public final int activeConnections;
        public final long totalRequests;
        
        HostStats(double avgResponseTime, int activeConnections, long totalRequests) {
            this.avgResponseTime = avgResponseTime;
            this.activeConnections = activeConnections;
            this.totalRequests = totalRequests;
        }
        
        @Override
        public String toString() {
            return String.format("HostStats{avgResponseTime=%.2fms, activeConnections=%d, totalRequests=%d}",
                avgResponseTime, activeConnections, totalRequests);
        }
    }
    
    /**
     * Закрывает балансировщик и освобождает ресурсы
     */
    public void shutdown() {
        cleanupExecutor.shutdown();
        try {
            if (!cleanupExecutor.awaitTermination(5, TimeUnit.SECONDS)) {
                cleanupExecutor.shutdownNow();
            }
        } catch (InterruptedException e) {
            cleanupExecutor.shutdownNow();
            Thread.currentThread().interrupt();
        }
    }
}
